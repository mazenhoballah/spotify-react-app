{"version":3,"sources":["images/spotify.svg","images/spotifyBlack.svg","components/login-page/login.component.jsx","utils/functions.js","components/redirect-page/redirect.component.jsx","components/header/header.component.jsx","components/not-found-page/notFound.component.jsx","utils/api.js","components/search-page/search.component.jsx","components/albums-page/albmus-page.component.jsx","App.js","index.js"],"names":["Login","props","useState","isHovered","setIsHovered","process","REACT_APP_CLIENT_ID","REACT_APP_AUTHORIZE_URL","REACT_APP_REDIRECT_URL","toggleHover","className","Button","variant","color","onClick","window","location","onMouseEnter","onMouseLeave","src","SpotifyBlackIcon","alt","SpotifyIcon","setAuthHeader","params","JSON","parse","localStorage","getItem","axios","defaults","headers","common","access_token","error","console","log","RedirectPage","this","history","setExpiryTime","_","isEmpty","hash","push","slice","split","reduce","prev","curr","title","value","expiryTime","Date","getTime","expires_in","setItem","stringify","React","Component","Header","NotFoundPage","Fragment","to","get","url","a","result","data","useStyles","makeStyles","root","width","marginTop","marginLeft","marginRight","height","media","SearchPage","classes","searchTerm","setSearchTerm","items","setItems","setErrorMsg","searchForItems","term","encodeURIComponent","API_URL","toLocaleUpperCase","artists","popularity","useEffect","trim","Container","maxWidth","TextField","id","label","type","onChange","event","target","style","display","alignItems","flexWrap","margin","map","artist","i","pathname","artistName","name","Card","CardActionArea","images","CardMedia","image","CardContent","Typography","gutterBottom","component","followers","total","Rating","readOnly","paddingTop","flexDirection","AlbumsPage","artistId","useParams","albums","setAlbums","searchForAlbums","item","release_date","total_tracks","CardActions","size","href","external_urls","spotify","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e78e7f7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spotify.8eecc546.svg\";","export default __webpack_public_path__ + \"static/media/spotifyBlack.2afdad89.svg\";","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport SpotifyIcon from '../../images/spotify.svg';\r\nimport SpotifyBlackIcon from '../../images/spotifyBlack.svg';\r\nimport './login.styles.scss';\r\n\r\nconst Login = (props) => {\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const {\r\n        REACT_APP_CLIENT_ID,\r\n        REACT_APP_AUTHORIZE_URL,\r\n        REACT_APP_REDIRECT_URL,\r\n    } = process.env;\r\n\r\n    const handleLogin = () => {\r\n        window.location = `${REACT_APP_AUTHORIZE_URL}?client_id=${REACT_APP_CLIENT_ID}&redirect_uri=${REACT_APP_REDIRECT_URL}&response_type=token&show_dialog=true`;\r\n    };\r\n\r\n    const toggleHover = () => {\r\n        setIsHovered(!isHovered);\r\n    };\r\n    return (\r\n        <div className='login'>\r\n            <Button\r\n                variant='contained'\r\n                color='primary'\r\n                className='btn-color'\r\n                onClick={handleLogin}\r\n                onMouseEnter={toggleHover}\r\n                onMouseLeave={toggleHover}\r\n            >\r\n                Login using Spotify\r\n                {!isHovered ? (\r\n                    <img src={SpotifyIcon} alt='' className='icon' />\r\n                ) : (\r\n                    <img src={SpotifyBlackIcon} alt='' className='icon' />\r\n                )}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import axios from 'axios';\r\nexport const getParamValues = (url) => {\r\n  return url\r\n    .slice(1)\r\n    .split('&')\r\n    .reduce((prev, curr) => {\r\n      const [title, value] = curr.split('=');\r\n      prev[title] = value;\r\n      return prev;\r\n    }, {});\r\n};\r\nexport const setAuthHeader = () => {\r\n  try {\r\n    const params = JSON.parse(localStorage.getItem('params'));\r\n    if (params) {\r\n      axios.defaults.headers.common[\r\n        'Authorization'\r\n      ] = `Bearer ${params.access_token}`;\r\n    }\r\n  } catch (error) {\r\n    console.log('Error setting auth', error);\r\n  }\r\n};","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { getParamValues } from '../../utils/functions';\r\nexport default class RedirectPage extends React.Component {\r\n  componentDidMount() {\r\n    const { setExpiryTime, history, location } = this.props;\r\n    try {\r\n      if (_.isEmpty(location.hash)) {\r\n        return history.push('/search');\r\n      }\r\n      const access_token = getParamValues(location.hash);\r\n      const expiryTime = new Date().getTime() + access_token.expires_in * 1000;\r\n      localStorage.setItem('params', JSON.stringify(access_token));\r\n      localStorage.setItem('expiry_time', expiryTime);\r\n      history.push('/search');\r\n    } catch (error) {\r\n      history.push('/');\r\n    }\r\n  }\r\n  render() {\r\n    return null;\r\n  }\r\n}","import React from 'react';\r\nconst Header = () => {\r\n    return <h1 className='main-heading'>Spotify Music Search</h1>;\r\n};\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from '../header/header.component';\r\nconst NotFoundPage = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Header />\r\n            Page not found. Goto <Link to='/'>Home Page</Link>\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default NotFoundPage;\r\n","import axios from 'axios';\r\nimport { setAuthHeader } from './functions';\r\nexport const get = async (url, params) => {\r\n  setAuthHeader();\r\n  const result = await axios.get(url, params);\r\n  return result.data;\r\n};","import React, { useEffect, useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { get } from '../../utils/api';\r\nimport './search-page.styles.scss';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 270,\r\n        marginTop: '40px',\r\n        marginLeft: '15px',\r\n        marginRight: '15px',\r\n        height: 400,\r\n    },\r\n    media: {\r\n        height: 240,\r\n        width: 300,\r\n    },\r\n});\r\nconst SearchPage = (props) => {\r\n    const classes = useStyles();\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [items, setItems] = useState({});\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        const searchTerm = event.target.value;\r\n        setSearchTerm(searchTerm);\r\n    };\r\n\r\n    const searchForItems = async () => {\r\n        setItems({});\r\n        try {\r\n            const term = encodeURIComponent(searchTerm);\r\n            const API_URL = `https://api.spotify.com/v1/search?q=${term.toLocaleUpperCase()}&type=artist`;\r\n            const result = await get(API_URL);\r\n            setItems(result);\r\n            console.log('results => ', result);\r\n            console.log(result.artists.items[0].popularity);\r\n        } catch (error) {}\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\r\n            'TOKEN => ',\r\n            localStorage.getItem('params').split(',')[0].split(':')[1]\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('items=>', items);\r\n    }, [items]);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm.trim() !== '') {\r\n            setErrorMsg('');\r\n            searchForItems();\r\n            console.log(searchTerm);\r\n        } else {\r\n            setErrorMsg('Please enter a search term.');\r\n        }\r\n        return () => {\r\n            setSearchTerm(''); //clean the state in the unmount of the component\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    return (\r\n        <Container maxWidth='lg'>\r\n            <div className='search-container'>\r\n                <div>\r\n                    <TextField\r\n                        id='outlined-search'\r\n                        label='Search for an artist'\r\n                        type='search'\r\n                        variant='outlined'\r\n                        className='search-field'\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    flexWrap: 'wrap',\r\n                    margin:'0 auto'\r\n                }}\r\n            >\r\n                {items.artists ? (\r\n                    items.artists.items.map((artist, i) => (\r\n                        <div key={i}>\r\n                            <Link\r\n                                to={{\r\n                                    pathname: `/${artist.id}/albums`,\r\n                                    artistName: artist.name,\r\n                                }}\r\n                                className='link'\r\n                            >\r\n                                <Card className={classes.root}>\r\n                                    <CardActionArea>\r\n                                        {artist.images[0] ? (\r\n                                            <CardMedia\r\n                                                className={classes.media}\r\n                                                image={artist.images[2].url}\r\n                                                title={artist.name}\r\n                                            />\r\n                                        ) : (\r\n                                            <CardMedia\r\n                                                className={classes.media}\r\n                                                // image={artist.images[2].url}\r\n                                                title={artist.name}\r\n                                            />\r\n                                        )}\r\n                                        <CardContent>\r\n                                            <Typography\r\n                                                gutterBottom\r\n                                                variant='h5'\r\n                                                component='h2'\r\n                                            >\r\n                                                {artist.name}\r\n                                            </Typography>\r\n                                            <Typography\r\n                                                variant='body2'\r\n                                                color='textSecondary'\r\n                                                component='p'\r\n                                            >\r\n                                                {artist.followers.total}\r\n                                            </Typography>\r\n                                            <Rating\r\n                                                name='read-only'\r\n                                                value={artist.popularity / 20}\r\n                                                readOnly\r\n                                                style={{\r\n                                                    paddingTop: '10px',\r\n                                                }}\r\n                                            />\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                                </Card>\r\n                            </Link>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\nexport default SearchPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useParams, useLocation } from 'react-router';\r\nimport { get } from '../../utils/api';\r\nimport './albums-page.styles.scss';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Container from '@material-ui/core/Container';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 270,\r\n        marginTop: '40px',\r\n        marginLeft: '15px',\r\n        marginRight: '15px',\r\n        display:'flex',\r\n        flexDirection:'column'\r\n    },\r\n    media: {\r\n        height: 240,\r\n        width: 300,\r\n    },\r\n});\r\nconst AlbumsPage = () => {\r\n    const classes = useStyles();\r\n    const { artistId } = useParams();\r\n    const [albums, setAlbums] = useState({});\r\n\r\n    const searchForAlbums = async () => {\r\n        setAlbums({});\r\n        try {\r\n            const API_URL = `https://api.spotify.com/v1/artists/${artistId}/albums`;\r\n            const result = await get(API_URL);\r\n            console.log('albums => ', result.items);\r\n            // console.log('album name=>', albums.items[0].name);\r\n            setAlbums(result);\r\n        } catch (error) {\r\n            console.log('ERROR=>', error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        searchForAlbums();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {albums.items ? (\r\n                <div className='title-container'>\r\n                    <Container maxWidth='lg'>\r\n                        <div className='title'>\r\n                            <h1>{albums.items[0].artists[0].name}</h1>\r\n                            <h3>Albums</h3>\r\n                        </div>\r\n                    </Container>\r\n                    <Container maxWidth='lg'>\r\n                        <div\r\n                            style={{\r\n                                display: 'flex',\r\n                                flexWrap: 'wrap',\r\n                            }}\r\n                        >\r\n                            {albums.items.map((item, i) => (\r\n                                <Card className={classes.root} key={i}>\r\n                                    <CardActionArea className='card-body'>\r\n                                        <CardMedia\r\n                                            className={classes.media}\r\n                                            image={item.images[0].url}\r\n                                            // title={item.name}\r\n                                        />\r\n                                        <CardContent>\r\n                                            <Typography\r\n                                                gutterBottom\r\n                                                variant='h5'\r\n                                                component='h2'\r\n                                            >\r\n                                                {item.name}\r\n                                            </Typography>\r\n                                            <Typography\r\n                                                variant='body2'\r\n                                                color='textSecondary'\r\n                                                component='p'\r\n                                            >\r\n                                                {item.release_date}\r\n                                            </Typography>\r\n                                            <Typography\r\n                                                variant='body2'\r\n                                                color='textSecondary'\r\n                                                component='p'\r\n                                            >\r\n                                                {item.total_tracks} Tracks\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                                    <CardActions className='actions'>\r\n                                        <Button\r\n                                            size='small'\r\n                                            color='primary'\r\n                                            href={item.external_urls.spotify}\r\n                                            className='link'\r\n                                        >\r\n                                            Preview on Spotify\r\n                                        </Button>\r\n                                    </CardActions>\r\n                                </Card>\r\n                            ))}\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlbumsPage;\r\n","import React from 'react';\nimport Login from './components/login-page/login.component';\nimport RedirectPage from './components/redirect-page/redirect.component';\nimport NotFoundPage from './components/not-found-page/notFound.component';\nimport SearchPage from './components/search-page/search.component';\nimport AlbumsPage from './components/albums-page/albmus-page.component';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <Switch>\n                <Route exact path='/spotify-react-app' component={Login} />\n                <Route path='/redirect' component={RedirectPage} />\n                <Route path='/search' component={SearchPage} />\n                <Route path={'/:artistId/albums'} component={AlbumsPage} />\n                <Route component={NotFoundPage} />\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter }    from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}